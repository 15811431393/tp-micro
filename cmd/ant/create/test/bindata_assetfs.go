// Code generated by go-bindata.
// sources:
// .DS_Store
// __ant__tpl__.go
// DO NOT EDIT!

package test

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _Ds_store = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\xd8\x31\x0a\x02\x31\x10\x85\xe1\x37\x31\x45\xc0\x26\xa5\x65\x1a\x0f\xe0\x0d\xc2\xb2\x9e\xc0\x0b\x58\x78\x05\xfb\x1c\x5d\x96\x79\x60\x60\xd5\x4e\x8c\xcb\xfb\x40\xfe\x05\x37\x2a\x16\x31\x23\x00\x9b\xee\xb7\x13\x90\x01\x24\x78\x71\xc4\x4b\x89\x8f\x95\xd0\x5d\x1b\x5f\x43\x44\x44\x44\xc6\x66\x9e\xb4\xff\xf5\x07\x11\x91\xe1\x2c\xfb\x43\x61\x2b\xdb\xbc\xc6\xe7\x03\x1b\xbb\x35\x99\x2d\x6c\x65\x9b\xd7\x78\x5f\x60\x23\x9b\xd8\xcc\x16\xb6\xb2\xcd\xcb\x4d\xcb\x38\x7c\x18\xdf\xd9\x38\xa1\x18\xa7\x10\x2b\x6c\xfd\xce\x77\x23\xf2\xef\x76\x9e\xbc\xfc\xfe\x9f\xdf\xcf\xff\x22\xb2\x61\x16\xe7\xcb\x3c\x3d\x07\x82\xf5\x0d\x00\xae\xdd\xf5\xa7\x43\x40\xf0\x3f\x0b\x0f\xdd\x5a\x1d\x04\x44\x06\xf3\x08\x00\x00\xff\xff\x6a\x00\x88\x6d\x04\x18\x00\x00")

func Ds_storeBytes() ([]byte, error) {
	return bindataRead(
		_Ds_store,
		".DS_Store",
	)
}

func Ds_store() (*asset, error) {
	bytes, err := Ds_storeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".DS_Store", size: 6148, mode: os.FileMode(420), modTime: time.Unix(1518838829, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var ___ant__tpl__Go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x52\xc1\x6e\xdb\x30\x0c\x3d\x4b\x5f\x41\xf4\x94\xe4\x30\xa5\x5b\xd1\x43\x30\x0c\xc8\xda\x01\x29\x90\x76\xc1\x92\x9e\x55\xc1\x66\x6c\x6d\xb6\xe4\x49\xcc\xb0\xa2\xc8\xbf\x0f\x94\xe2\x39\x0e\x9a\x83\x11\xf3\xf1\x3d\x3e\x3e\x5a\x29\xe8\x4c\xf1\xcb\x54\x08\x5a\x2f\x9f\x76\x5a\xef\x36\x6b\xad\xc1\x46\xa0\x1a\xa1\x0b\xfe\x27\x16\x04\x84\x6d\xd7\x18\x42\xf9\x5e\xb3\x94\x4a\x71\x61\xf3\xa0\xf5\xe6\x79\xcd\xf4\x80\x95\x8d\x84\x01\xf8\x1d\x82\x3f\x10\x86\x05\xb7\x81\xaa\x7d\x8b\xf9\x5f\x6b\xa8\x56\xa5\xfd\x63\x4b\x94\xf4\xda\xe1\x85\x86\x75\x84\x61\x6f\x0a\x84\x37\x29\x56\xbe\xc5\xc9\x2c\x52\x38\x14\xf4\x76\x9c\xc2\x8c\x0b\x3f\xb0\x6b\x5e\xa5\x78\x34\x54\xcb\xe3\xd8\xc5\x76\x35\x76\xb1\x5d\x8d\x5d\x44\x32\x74\x31\x34\x51\x46\x43\xb7\x64\x68\x32\xe3\xe7\x32\x54\x71\x7a\x9a\xf1\xf8\xfd\xfe\xdb\x1a\x8a\x80\x86\x10\x5a\x5f\x62\xd3\x0b\x25\x44\x6b\xc8\x36\x59\xe1\x3e\x6d\xc7\x6c\x29\x9e\x23\x86\x5e\xc2\x50\x0d\x85\x77\x14\x7c\xd3\x60\xc8\xfc\x54\x1c\xcd\x57\x0a\xb2\x00\xd4\xc6\x95\xdc\x78\x12\x9c\xcc\x06\xe1\x29\x9c\x5e\x72\x1a\x79\xc0\xff\x74\x80\xe3\x86\x90\xa0\x34\x65\x40\x06\x97\x77\xde\x11\x3a\xe2\x8a\x75\x15\x28\x05\x84\x7f\x89\xa5\x12\x65\x72\xe6\x84\x27\x42\xbe\x19\x98\xce\x82\x49\xab\x9d\x61\x83\x2a\x93\x72\xa7\x2b\xa5\x10\x4b\xd8\x37\xde\xd0\xed\xcd\x80\x44\x1f\xa4\x10\x5f\x7b\x00\x5e\x3a\x13\x4c\xbb\xb8\xfa\x1c\x8c\xab\x70\x01\xf3\x0f\xf3\xeb\xc5\xf5\x9c\x7f\x5f\xae\x5e\xa4\x38\x9e\x19\xc9\x3b\x9c\x39\x09\x18\x0f\x0d\xf5\x5e\x2e\x57\x64\xe2\xef\x83\x27\x8b\x8e\xa4\x10\x77\x83\x99\xa3\x9c\xa6\xc8\xfa\x33\x03\x7f\x1a\x7d\xe0\x79\xbf\x94\xc2\x19\xde\x8b\xee\x22\xdf\xeb\xf6\x26\x25\x66\x5b\x8c\x64\xda\x2e\x9e\x4e\xc0\xe7\x86\x03\x3f\xac\xdb\xfb\xac\x91\x6a\x03\xff\xa1\x04\xc8\x0a\x52\x3c\x99\x16\x4f\x07\x90\x62\x59\x61\x02\x3e\x7d\x94\x47\xf9\x2f\x00\x00\xff\xff\x84\xa1\xc5\x67\xa3\x03\x00\x00")

func __ant__tpl__GoBytes() ([]byte, error) {
	return bindataRead(
		___ant__tpl__Go,
		"__ant__tpl__.go",
	)
}

func __ant__tpl__Go() (*asset, error) {
	bytes, err := __ant__tpl__GoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "__ant__tpl__.go", size: 931, mode: os.FileMode(420), modTime: time.Unix(1523638484, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	".DS_Store":       Ds_store,
	"__ant__tpl__.go": __ant__tpl__Go,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	".DS_Store":       &bintree{Ds_store, map[string]*bintree{}},
	"__ant__tpl__.go": &bintree{__ant__tpl__Go, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
