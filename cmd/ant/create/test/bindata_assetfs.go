// Code generated by go-bindata.
// sources:
// .DS_Store
// __ant__tpl__.go
// DO NOT EDIT!

package test

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _Ds_store = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\xd8\x31\x0a\x02\x31\x10\x85\xe1\x37\x31\x45\xc0\x26\xa5\x65\x1a\x0f\xe0\x0d\xc2\xb2\x9e\xc0\x0b\x58\x78\x05\xfb\x1c\x5d\x96\x79\x60\x60\xd5\x4e\x8c\xcb\xfb\x40\xfe\x05\x37\x2a\x16\x31\x23\x00\x9b\xee\xb7\x13\x90\x01\x24\x78\x71\xc4\x4b\x89\x8f\x95\xd0\x5d\x1b\x5f\x43\x44\x44\x44\xc6\x66\x9e\xb4\xff\xf5\x07\x11\x91\xe1\x2c\xfb\x43\x61\x2b\xdb\xbc\xc6\xe7\x03\x1b\xbb\x35\x99\x2d\x6c\x65\x9b\xd7\x78\x5f\x60\x23\x9b\xd8\xcc\x16\xb6\xb2\xcd\xcb\x4d\xcb\x38\x7c\x18\xdf\xd9\x38\xa1\x18\xa7\x10\x2b\x6c\xfd\xce\x77\x23\xf2\xef\x76\x9e\xbc\xfc\xfe\x9f\xdf\xcf\xff\x22\xb2\x61\x16\xe7\xcb\x3c\x3d\x07\x82\xf5\x0d\x00\xae\xdd\xf5\xa7\x43\x40\xf0\x3f\x0b\x0f\xdd\x5a\x1d\x04\x44\x06\xf3\x08\x00\x00\xff\xff\x6a\x00\x88\x6d\x04\x18\x00\x00")

func Ds_storeBytes() ([]byte, error) {
	return bindataRead(
		_Ds_store,
		".DS_Store",
	)
}

func Ds_store() (*asset, error) {
	bytes, err := Ds_storeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".DS_Store", size: 6148, mode: os.FileMode(420), modTime: time.Unix(1518838829, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var ___ant__tpl__Go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x52\xcd\x6e\xdb\x30\x0c\x3e\x5b\x4f\x41\xf4\x94\xe4\x30\xa5\x40\xd1\x43\x30\x0c\xc8\xda\x01\x19\x90\x6e\xc1\x92\x9d\x55\xc2\x61\x6d\x6d\xb6\xe4\x49\xcc\xb0\xa2\xc8\xbb\x0f\x94\xe2\xd9\x0e\x96\x43\x10\x91\xfc\x7e\xf8\x31\x5a\x43\x87\xe5\x4f\xac\x08\x8c\x59\x7f\x39\x18\x73\xd8\x6d\x8d\x01\x1b\x81\x6b\x82\x2e\xf8\x1f\x54\x32\x30\xb5\x5d\x83\x4c\xea\x7f\xc3\x4a\x69\x2d\x85\xdd\x67\x63\x76\xdf\xb7\x02\x0f\x54\xd9\xc8\x14\x40\xde\x10\xfc\x89\x29\xac\x64\x0c\x74\xed\x5b\xca\xbf\x5a\xe4\x5a\x1f\xed\x6f\x7b\x24\xc5\xaf\x1d\x5d\x71\x58\xc7\x14\x5e\xb0\x24\x78\x53\xc5\xc6\xb7\x34\x5b\x44\x0e\xa7\x92\xdf\xce\x73\x58\x48\xe1\x1b\x75\xcd\xab\x2a\x9e\x90\x6b\x75\x9e\xba\xd8\x6f\xa6\x2e\xf6\x9b\xa9\x8b\xc8\xc8\x57\xa2\x09\x32\x11\xdd\x33\xf2\x6c\x21\xdf\xeb\x50\xc5\xf9\x45\xe3\xe9\xeb\xe3\xa7\x2d\x94\x81\x90\x09\x5a\x7f\xa4\xa6\x27\x4a\x1d\x63\x20\xdb\x14\x86\xc7\xb4\x9d\xa0\x7b\x30\x72\x0d\xa5\x77\x1c\x7c\xd3\x50\xc8\xc8\x54\x9c\x28\x6b\x0d\x19\x0a\x35\xba\xa3\x0c\x5e\xa8\x66\x8b\x81\x72\x0e\x97\x47\xce\x21\x0b\xfc\xcb\x05\x24\x68\x08\xa9\x95\x54\x86\xce\xe0\xef\xc1\x3b\x26\xc7\x52\xb1\xae\x02\xad\x81\xe9\x0f\x0b\x55\x82\xcc\x46\x4e\x44\x11\xf2\xb5\x00\x3b\x0b\x28\x4b\x8d\x16\x1c\xb1\x0a\x28\x4f\xba\xa3\x2a\x8a\x35\xbc\x34\x1e\xf9\xfe\x6e\xe8\x44\x1f\x54\x51\x7c\xec\x1b\xf0\xdc\x61\xc0\x76\x75\xf3\x3e\xa0\xab\x68\x05\xcb\x77\xcb\xdb\xd5\xed\x52\x3e\x1f\x6e\x9e\x55\x71\x1e\x19\xc9\x3b\x8c\x9c\x04\x8a\xa7\x86\x7b\x2f\xd7\x2b\x0a\xf0\xd7\xc9\xb3\x25\xc7\xaa\x28\x1e\x06\x33\x67\x35\x4f\x91\xf5\x07\x06\xf9\x53\xf4\x81\xe7\xfd\x52\x0a\xa3\x7e\x4f\x7a\x88\x72\xaf\xfb\xbb\x94\x98\x6d\x29\x32\xb6\x9d\xdc\xf8\x6f\x00\x00\x00\xff\xff\x68\x56\x6c\x96\x50\x03\x00\x00")

func __ant__tpl__GoBytes() ([]byte, error) {
	return bindataRead(
		___ant__tpl__Go,
		"__ant__tpl__.go",
	)
}

func __ant__tpl__Go() (*asset, error) {
	bytes, err := __ant__tpl__GoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "__ant__tpl__.go", size: 848, mode: os.FileMode(420), modTime: time.Unix(1523623098, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	".DS_Store":       Ds_store,
	"__ant__tpl__.go": __ant__tpl__Go,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	".DS_Store":       &bintree{Ds_store, map[string]*bintree{}},
	"__ant__tpl__.go": &bintree{__ant__tpl__Go, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
