// Code generated by go-bindata.
// sources:
// __tp-micro__tpl__.go
// DO NOT EDIT!

package test

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var ___tpMicro__tpl__Go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x52\xc1\x6e\xda\x40\x10\x3d\x7b\xbf\x62\xc4\x09\x38\xd4\xa4\x8d\x72\x40\x55\x25\x37\xa9\x4a\x24\x08\xb4\x24\x87\x9e\xcc\xd6\x1e\xcc\x36\xf6\xae\x33\x3b\xae\x8a\x22\xfe\xbd\xda\x5d\x13\xdb\x84\x83\xb5\xec\x9b\xf7\xe6\xcd\xdb\x89\x63\xa8\x65\xf6\x2c\x0b\x84\x34\x7d\xdc\x2c\xd3\x14\x94\x05\x3e\x20\xd4\x64\xfe\x60\xc6\xc0\x58\xd5\xa5\x64\x14\x17\x75\x42\xc4\x31\xa4\x69\xb2\xb9\x4f\xd3\xcd\xd3\xd2\x31\x09\x0b\x65\x19\x09\xdc\x7f\x20\xd3\x30\xd2\xdc\x95\x41\x7c\x30\x15\x86\x53\x25\xf9\x10\xe7\xea\xaf\xca\x51\xf0\xb1\xc6\x0b\x0d\xa5\x19\x69\x2f\x33\x84\x57\x11\x2d\x4c\x85\xe3\xa9\x65\x6a\x32\x7e\x3d\x4d\x60\xea\x2e\x7e\xa2\x6d\x4a\x16\xd1\x4a\xf2\x41\x9c\x86\x36\xb6\x8b\xa1\x8d\xed\x62\x68\xc3\xb2\xe4\x8b\xae\x9e\x32\xe8\xba\x65\xc9\xe3\xa9\xfb\x26\x54\x4c\xde\x5a\xac\x7e\x6d\x7f\x2c\xd3\x74\xb5\xbe\xfb\xe6\x8c\x66\x84\x92\x11\xaa\xa3\x7d\x29\xa1\x32\x39\x96\x67\xe1\x8b\xc2\x60\xdf\x09\x3f\x59\xa4\x4e\x6e\xfd\xf0\x7d\xfd\x5e\xce\xe8\xc2\xe4\xbf\x2f\x04\x87\xa5\x9d\xe0\x9d\x8f\x31\xa1\xa2\x55\x75\x91\x40\x66\x34\x93\x29\x4b\xa4\xc0\xf7\x97\x83\x01\xe3\x18\x02\x13\x0e\x52\xe7\xae\xb0\x55\x1a\x4f\xdf\x14\x27\xd0\x9e\xdb\xb8\x43\x83\x2e\x7f\x70\x2f\x0a\x14\x40\xdf\xa7\x87\x75\x0e\x6f\x8d\x66\xd4\xfe\x46\xe9\x02\xe2\x18\x18\xff\x79\x35\xcf\x19\xf7\xcc\x24\x54\x40\xd8\x0b\x90\xb5\x02\x49\x45\x6f\xc0\x9e\xa4\x63\x84\x3a\x9d\x8b\x28\x4a\x60\x5f\x1a\xc9\x37\xd7\x1d\x62\x0d\x89\x28\xfa\x7a\x06\x60\x57\x4b\x92\xd5\x7c\xf4\x99\xa4\x2e\x70\x0e\xb3\x0f\xb3\xab\xf9\xd5\xcc\xfd\xbe\x8c\x76\x22\x3a\xf5\x5c\xb4\x13\xf4\x8c\xb4\x33\x46\x03\x7c\x68\xe7\xa5\x31\xac\x50\xb3\x88\xa2\xdb\xce\xce\x49\x4c\x7c\x68\xed\x26\x81\x5b\xbe\x73\xe2\x7e\x3c\x1f\x41\x87\x9e\x15\x1f\xad\x7b\xae\x9b\x6b\x9f\x96\xaa\xd0\xb2\xac\x6a\xdb\xbe\x80\xdb\x21\x68\xdc\x47\xe9\xbd\x09\x12\xfe\xae\xe3\xdf\xe7\x00\xad\x02\xec\x9e\xf1\x38\x1f\xd5\xa4\xdc\x9c\x0f\xb2\xc2\xf3\x4b\x04\xa0\xd1\x1e\x48\x0a\xf4\x8c\x4f\x1f\xc5\x49\xfc\x0f\x00\x00\xff\xff\x37\x97\x62\x29\x13\x04\x00\x00")

func __tpMicro__tpl__GoBytes() ([]byte, error) {
	return bindataRead(
		___tpMicro__tpl__Go,
		"__tp-micro__tpl__.go",
	)
}

func __tpMicro__tpl__Go() (*asset, error) {
	bytes, err := __tpMicro__tpl__GoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "__tp-micro__tpl__.go", size: 1043, mode: os.FileMode(420), modTime: time.Unix(1530106070, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"__tp-micro__tpl__.go": __tpMicro__tpl__Go,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"__tp-micro__tpl__.go": &bintree{__tpMicro__tpl__Go, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
